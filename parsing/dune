;**************************************************************************
;*                                                                        *
;*                                 OCaml                                  *
;*                                                                        *
;*                     Thomas Refis, Jane Street Europe                   *
;*                                                                        *
;*   Copyright 2018 Jane Street Group LLC                                 *
;*                                                                        *
;*   All rights reserved.  This file is distributed under the terms of    *
;*   the GNU Lesser General Public License version 2.1, with the          *
;*   special exception on linking described in the file LICENSE.          *
;*                                                                        *
;**************************************************************************

(env
 ; (dev     (flags (:standard -w +a-4-9-40-41-42-44-45-48-67)))

 ; ignore warnings
 (dev (flags (:standard -warn-error -A))
  (js_of_ocaml
    (flags (:standard --enable=effects))
    (build_runtime_flags (:standard --enable=effects))))
 (release (flags (:standard -w +a-4-9-40-41-42-44-45-48-67))
  (js_of_ocaml
   (flags (:standard --enable=effects))
   (build_runtime_flags (:standard --enable=effects)))))

(rule
 (targets parser.mli parser.ml camlinternalMenhirLib.ml camlinternalMenhirLib.mli)
 (action  (run ./generate_parser.sh))
 (deps    parser.mly)
 (mode fallback))

(ocamllex
 (modules lexer)
 (mode fallback))

(library
 (name hipcore)
 (public_name heifer.hipcore)
 (libraries debug unionFind str)
 (modules subst Pretty common hiptypes globals)
 (inline_tests)
 (preprocess (pps visitors.ppx ppx_expect ppx_deriving.std)))

(library
 (name hipprover)
 (public_name heifer.hipprover)
 (modules ProversEx Rewriting entail forward_rules infer_types normalize)
 (libraries hipcore provers search)
 (inline_tests)
 (preprocess (pps ppx_expect)))

(library
 (name ocamlfrontend)
 (public_name heifer.ocamlfrontend)
 (modules
 parser lexer Syntaxerr Pprintast Printast Asttypes Ast_helper Longident Parsetree Location Warnings Misc Terminfo Docstrings Build_path_prefix_map Clflags Profile Numbers Identifiable Arg_helper CamlinternalMenhirLib
 core_lang) ; the only module we own
 (libraries hipcore)
 (flags :standard -w -A))

(library
 (name racketfrontend)
 (public_name heifer.racketfrontend)
 (modules
 racket_parser racket_lexer)
 (libraries hipcore)
 (flags :standard -w -A))

(menhir
 (modules racket_parser))

(ocamllex racket_lexer)

(library
 (name hiplib)
 (public_name heifer)
 (modules hiplib tests)
 (libraries hipprover ocamlfrontend racketfrontend)
 (inline_tests)
 (preprocess (pps ppx_expect)))

(executable
 (name hip)
 (public_name heifer)
 (modules hip)
 (libraries unix hiplib provers_native))

(executable
 (name hipjs)
 (modules hipjs)
 (libraries brr hiplib provers_js)
 (modes js))

(install
 (section bin)
 (files (hip.exe as hip)))

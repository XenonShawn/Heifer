dune exec main/hip.exe src/programs.t/transaction.ml

(A)^w |- (A)^oo :true 

(A)^w |- (A)^*  :false

infinitiable ((A)^w) = true
infinitiable ((A)^*) = false  


(Send._*.Receive._*)*

no outstanding send 

all the send 


CFG 
RG
Counting Machine 

spec : Put;(Get|Put)*

restrict
write the specificaiton for effects
generalise 


let main  () =
  let g =
    match f () with
    | r -> fun s -> (s, r)
    | effect (Put s1) k ->
      fun _ -> continue k () s1
    | effect Get k ->
      fun s -> continue k s s
  in g 1


let main  () =
  let g =
    let cnt = ref 0 in
    let lget () = !cnt in
    let lput n = let cnt:= n in ()
    match f () with
    | r -> fun s -> (s, r)
    | effect (Put s1) k ->
         continue k (lput s1)
    | effect Get k ->
         continue k (lget ())
  in g 1

let main  () =
  let g =
    let cnt = ref 0 in
    let init () = cnt:=0 in
    let inc () = let cnt:= !cnt+1 in ()
    let dec () = if n>0 then cnt:= !cnt-1 
	             else error in
    match f () with
    | r -> fun s -> (s, r)
    | effect (Inc) k ->
         continue k (inc ())
    | effect Dec k ->
         continue k (dec ())
    | effect Init () ->
         continue k (init ())
  in g 1

protocoal verification
 - regular grammar
 - finite state machine
 
CFG - stack machine
    - more expressive

integer counter
 - timing automata (UPPAAL)
 

   init :: -> 0
   inc  :: n -> n+1
   dec  :: n>0 /\ n -> n-1
   inv :: n>=0
   
   state with inv
   arrows -- pre, transtion
   
   Wang Yi : timing aut
   
   
let main  () =
  let g =
    match f () with
    | r -> fun s -> (s, r)
    | effect (Put s1) k ->
      fun _ -> continue k () s1
    | effect Get k ->
      fun s -> continue k s s
  in g 1
